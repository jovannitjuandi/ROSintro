// Generated by gencpp from file hello/TwoDimensional.msg
// DO NOT EDIT!


#ifndef HELLO_MESSAGE_TWODIMENSIONAL_H
#define HELLO_MESSAGE_TWODIMENSIONAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace hello
{
template <class ContainerAllocator>
struct TwoDimensional_
{
  typedef TwoDimensional_<ContainerAllocator> Type;

  TwoDimensional_()
    : order(0)
    , label()
    , backgroundColor()
    , borderColor()
    , borderDash()
    , borderWidth(0)
    , pointBackgroundColor()
    , pointBorderColor()
    , pointBorderWidth()
    , pointRadius()
    , pointStyle()
    , lineTension(0.0)
    , data()  {
    }
  TwoDimensional_(const ContainerAllocator& _alloc)
    : order(0)
    , label(_alloc)
    , backgroundColor(_alloc)
    , borderColor(_alloc)
    , borderDash(_alloc)
    , borderWidth(0)
    , pointBackgroundColor(_alloc)
    , pointBorderColor(_alloc)
    , pointBorderWidth(_alloc)
    , pointRadius(_alloc)
    , pointStyle(_alloc)
    , lineTension(0.0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _order_type;
  _order_type order;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _backgroundColor_type;
  _backgroundColor_type backgroundColor;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _borderColor_type;
  _borderColor_type borderColor;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _borderDash_type;
  _borderDash_type borderDash;

   typedef uint8_t _borderWidth_type;
  _borderWidth_type borderWidth;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pointBackgroundColor_type;
  _pointBackgroundColor_type pointBackgroundColor;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pointBorderColor_type;
  _pointBorderColor_type pointBorderColor;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pointBorderWidth_type;
  _pointBorderWidth_type pointBorderWidth;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pointRadius_type;
  _pointRadius_type pointRadius;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pointStyle_type;
  _pointStyle_type pointStyle;

   typedef float _lineTension_type;
  _lineTension_type lineTension;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::hello::TwoDimensional_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hello::TwoDimensional_<ContainerAllocator> const> ConstPtr;

}; // struct TwoDimensional_

typedef ::hello::TwoDimensional_<std::allocator<void> > TwoDimensional;

typedef boost::shared_ptr< ::hello::TwoDimensional > TwoDimensionalPtr;
typedef boost::shared_ptr< ::hello::TwoDimensional const> TwoDimensionalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hello::TwoDimensional_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hello::TwoDimensional_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hello::TwoDimensional_<ContainerAllocator1> & lhs, const ::hello::TwoDimensional_<ContainerAllocator2> & rhs)
{
  return lhs.order == rhs.order &&
    lhs.label == rhs.label &&
    lhs.backgroundColor == rhs.backgroundColor &&
    lhs.borderColor == rhs.borderColor &&
    lhs.borderDash == rhs.borderDash &&
    lhs.borderWidth == rhs.borderWidth &&
    lhs.pointBackgroundColor == rhs.pointBackgroundColor &&
    lhs.pointBorderColor == rhs.pointBorderColor &&
    lhs.pointBorderWidth == rhs.pointBorderWidth &&
    lhs.pointRadius == rhs.pointRadius &&
    lhs.pointStyle == rhs.pointStyle &&
    lhs.lineTension == rhs.lineTension &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hello::TwoDimensional_<ContainerAllocator1> & lhs, const ::hello::TwoDimensional_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hello

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hello::TwoDimensional_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello::TwoDimensional_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello::TwoDimensional_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello::TwoDimensional_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello::TwoDimensional_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello::TwoDimensional_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hello::TwoDimensional_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d5235d6d90ee1297e306e5021a67801";
  }

  static const char* value(const ::hello::TwoDimensional_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d5235d6d90ee129ULL;
  static const uint64_t static_value2 = 0x7e306e5021a67801ULL;
};

template<class ContainerAllocator>
struct DataType< ::hello::TwoDimensional_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hello/TwoDimensional";
  }

  static const char* value(const ::hello::TwoDimensional_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hello::TwoDimensional_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# webviz_msgs/TwoDimensionalPlotDatapoint definition\n"
"\n"
"uint8 order\n"
"string label\n"
"string backgroundColor\n"
"string borderColor\n"
"uint8[] borderDash\n"
"uint8 borderWidth\n"
"string pointBackgroundColor\n"
"string pointBorderColor\n"
"string pointBorderWidth\n"
"string pointRadius\n"
"\n"
"# pointStyle can be 'circle', 'cross', 'crossRot', 'dash', 'line', 'rect', 'rectRounded', 'rectRot', or 'star'\n"
"string pointStyle\n"
"float32 lineTension\n"
"\n"
"# z field in geometry_msgs/Point is ignored\n"
"geometry_msgs/Point[] data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::hello::TwoDimensional_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hello::TwoDimensional_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.order);
      stream.next(m.label);
      stream.next(m.backgroundColor);
      stream.next(m.borderColor);
      stream.next(m.borderDash);
      stream.next(m.borderWidth);
      stream.next(m.pointBackgroundColor);
      stream.next(m.pointBorderColor);
      stream.next(m.pointBorderWidth);
      stream.next(m.pointRadius);
      stream.next(m.pointStyle);
      stream.next(m.lineTension);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TwoDimensional_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hello::TwoDimensional_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hello::TwoDimensional_<ContainerAllocator>& v)
  {
    s << indent << "order: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.order);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "backgroundColor: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.backgroundColor);
    s << indent << "borderColor: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.borderColor);
    s << indent << "borderDash[]" << std::endl;
    for (size_t i = 0; i < v.borderDash.size(); ++i)
    {
      s << indent << "  borderDash[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.borderDash[i]);
    }
    s << indent << "borderWidth: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.borderWidth);
    s << indent << "pointBackgroundColor: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pointBackgroundColor);
    s << indent << "pointBorderColor: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pointBorderColor);
    s << indent << "pointBorderWidth: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pointBorderWidth);
    s << indent << "pointRadius: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pointRadius);
    s << indent << "pointStyle: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pointStyle);
    s << indent << "lineTension: ";
    Printer<float>::stream(s, indent + "  ", v.lineTension);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HELLO_MESSAGE_TWODIMENSIONAL_H
