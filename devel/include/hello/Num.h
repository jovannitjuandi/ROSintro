// Generated by gencpp from file hello/Num.msg
// DO NOT EDIT!


#ifndef HELLO_MESSAGE_NUM_H
#define HELLO_MESSAGE_NUM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <geometry_msgs/Vector3.h>

namespace hello
{
template <class ContainerAllocator>
struct Num_
{
  typedef Num_<ContainerAllocator> Type;

  Num_()
    : first_name()
    , coordinate()  {
    }
  Num_(const ContainerAllocator& _alloc)
    : first_name(_alloc)
    , coordinate(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _first_name_type;
  _first_name_type first_name;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _coordinate_type;
  _coordinate_type coordinate;





  typedef boost::shared_ptr< ::hello::Num_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hello::Num_<ContainerAllocator> const> ConstPtr;

}; // struct Num_

typedef ::hello::Num_<std::allocator<void> > Num;

typedef boost::shared_ptr< ::hello::Num > NumPtr;
typedef boost::shared_ptr< ::hello::Num const> NumConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hello::Num_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hello::Num_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hello::Num_<ContainerAllocator1> & lhs, const ::hello::Num_<ContainerAllocator2> & rhs)
{
  return lhs.first_name == rhs.first_name &&
    lhs.coordinate == rhs.coordinate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hello::Num_<ContainerAllocator1> & lhs, const ::hello::Num_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hello

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hello::Num_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello::Num_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello::Num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello::Num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello::Num_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello::Num_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hello::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1d7a94780dfd063c66a59a7acca4aa5";
  }

  static const char* value(const ::hello::Num_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf1d7a94780dfd063ULL;
  static const uint64_t static_value2 = 0xc66a59a7acca4aa5ULL;
};

template<class ContainerAllocator>
struct DataType< ::hello::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hello/Num";
  }

  static const char* value(const ::hello::Num_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hello::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Num.msg\n"
"\n"
"std_msgs/String first_name\n"
"geometry_msgs/Vector3 coordinate\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::hello::Num_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hello::Num_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.first_name);
      stream.next(m.coordinate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Num_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hello::Num_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hello::Num_<ContainerAllocator>& v)
  {
    s << indent << "first_name: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.first_name);
    s << indent << "coordinate: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.coordinate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HELLO_MESSAGE_NUM_H
